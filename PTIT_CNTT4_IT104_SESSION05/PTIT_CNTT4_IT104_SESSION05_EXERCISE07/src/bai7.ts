class Book {
    private id: number;
    private title: string;
    private author: string;

    constructor(id: number, title: string, author: string) {
        this.id = id;
        this.title = title;
        this.author = author;
    }

    getId(): number {
        return this.id;
    }

    getInfo(): string {
        return `ID: ${this.id}, Ti√™u ƒë·ªÅ: ${this.title}, T√°c gi·∫£: ${this.author}`;
    }

    updateInfo(newTitle: string, newAuthor: string): void {
        this.title = newTitle;
        this.author = newAuthor;
    }
}

class Library {
    private books: Book[] = [];

    addBook(book: Book): void {
        this.books.push(book);
    }

    showBooks(): void {
        if (this.books.length === 0) {
            console.log("Th∆∞ vi·ªán hi·ªán kh√¥ng c√≥ s√°ch.");
            return;
        }
        console.log("Danh s√°ch s√°ch trong th∆∞ vi·ªán:");
        this.books.forEach((book, index) => {
            console.log(`${index + 1}. ${book.getInfo()}`);
        });
    }

    updateBookById(id: number, newTitle: string, newAuthor: string): void {
        const book = this.books.find(b => b.getId() === id);
        if (book) {
            book.updateInfo(newTitle, newAuthor);
            console.log(`S√°ch ID ${id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID ${id}.`);
        }
    }
}

// --- Test ---
const book1 = new Book(1, "ƒê·∫Øc Nh√¢n T√¢m", "Dale Carnegie");
const book2 = new Book(2, "Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u", "Rosie Nguy·ªÖn");
const book3 = new Book(3, "Nh√† Gi·∫£ Kim", "Paulo Coelho");

const myLibrary = new Library();
myLibrary.addBook(book1);
myLibrary.addBook(book2);
myLibrary.addBook(book3);

console.log("\nDanh s√°ch ban ƒë·∫ßu:");
myLibrary.showBooks();

myLibrary.updateBookById(2, "Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u - Phi√™n b·∫£n m·ªõi", "Rosie Nguy·ªÖn");

console.log("\nüìö Danh s√°ch sau khi c·∫≠p nh·∫≠t:");
myLibrary.showBooks();
